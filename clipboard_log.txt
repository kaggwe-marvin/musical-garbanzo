[2025-07-14 17:01:56] .\env_name\Scripts\activate
[2025-07-14 17:02:39] 
[2025-07-14 17:10:33] TEXT: pip install pywin32
[2025-07-14 17:11:00] FILE: C:\Users\marvin\Desktop\The Sandman S02 (ext: )
[2025-07-14 17:18:06] FOLDER: C:\Users\marvin\Desktop\The Sandman S02 (ext: ) (from: C:)
[2025-07-14 17:19:03] FILE: C:\Users\marvin\Downloads\Kaggwe Marvin Victor resume.docx (ext: .docx) (from: C:)
[2025-07-14 17:19:03] FILE: C:\Users\marvin\Downloads\Testosterone Boost Workout Plan.docx (ext: .docx) (from: C:)
[2025-07-14 17:32:56] FILE: C:\Users\marvin\Downloads\Kaggwe Marvin Victor resume.docx (ext: .docx) (category: document) (from: C:)
[2025-07-14 17:32:56] FILE: C:\Users\marvin\Downloads\Testosterone Boost Workout Plan.docx (ext: .docx) (category: document) (from: C:)
[2025-07-14 17:35:26] FILE: C:\Users\marvin\Documents\landlord-and-tenant-act-2022.pdf (ext: .pdf) (category: document) (from: C:)
[2025-07-14 17:39:36] TEXT: pip install watchdog
[2025-07-14 17:41:07] TEXT: import time
import os
import win32clipboard
import win32con
import threading
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler

class PasteTracker(FileSystemEventHandler):
    def __init__(self):
        self.recent_copies = {}
        self.paste_timeout = 30  # seconds to wait for paste after copy
        
    def add_copied_file(self, file_path):
        """Track a file that was just copied."""
        filename = os.path.basename(file_path)
        self.recent_copies[filename] = {
            'original_path': file_path,
            'timestamp': time.time()
        }
        
    def on_created(self, event):
        """Handle file creation events (potential paste operations)."""
        if not event.is_directory:
            filename = os.path.basename(event.src_path)
            current_time = time.time()
            
            # Check if this file was recently copied
            if filename in self.recent_copies:
                copy_info = self.recent_copies[filename]
                time_diff = current_time - copy_info['timestamp']
                
                # If file was created within timeout period after copy
                if time_diff <= self.paste_timeout:
                    original_path = copy_info['original_path']
                    paste_path = event.src_path
                    paste_drive = os.path.splitdrive(paste_path)[0]
                    
                    timestamp = time.strftime('%Y-%m-%d %H:%M:%S')
                    log_entry = f"[{timestamp}] PASTE: {original_path} -> {paste_path} (to: {paste_drive})"
                    print(log_entry)
                    
                    with open("clipboard_log.txt", "a", encoding="utf-8") as f:
                        f.write(log_entry + "\n")
                    
                    # Remove from tracking after successful paste
                    del self.recent_copies[filename]
            
            # Clean up old entries
            self.cleanup_old_entries(current_time)
    
    def cleanup_old_entries(self, current_time):
        """Remove entries older than timeout period."""
        expired_files = []
        for filename, info in self.recent_copies.items():
            if current_time - info['timestamp'] > self.paste_timeout:
                expired_files.append(filename)
        
        for filename in expired_files:
            del self.recent_copies[filename]

def get_file_category(extension):
    """Categorize files based on their extension."""
    # Convert to lowercase for case-insensitive matching
    ext = extension.lower()
    
    # Define categories
    categories = {
        'document': ['.txt', '.doc', '.docx', '.pdf', '.rtf', '.odt', '.pages'],
        'spreadsheet': ['.xls', '.xlsx', '.csv', '.ods', '.numbers'],
        'presentation': ['.ppt', '.pptx', '.key', '.odp'],
        'image': ['.jpg', '.jpeg', '.png', '.gif', '.bmp', '.tiff', '.svg', '.webp', '.ico'],
        'video': ['.mp4', '.avi', '.mov', '.wmv', '.flv', '.mkv', '.webm', '.m4v'],
        'audio': ['.mp3', '.wav', '.flac', '.aac', '.ogg', '.wma', '.m4a'],
        'archive': ['.zip', '.rar', '.7z', '.tar', '.gz', '.bz2', '.xz'],
        'code': ['.py', '.js', '.html', '.css', '.java', '.cpp', '.c', '.cs', '.php', '.rb', '.go', '.rs', '.swift'],
        'executable': ['.exe', '.msi', '.app', '.deb', '.rpm', '.dmg'],
        'data': ['.json', '.xml', '.yaml', '.yml', '.sql', '.db', '.sqlite'],
        'font': ['.ttf', '.otf', '.woff', '.woff2', '.eot'],
        'config': ['.ini', '.cfg', '.conf', '.config', '.properties', '.env']
    }
    
    # Find the category for the extension
    for category, extensions in categories.items():
        if ext in extensions:
            return category
    
    # Return 'other' if no category matches
    return 'other'

def get_clipboard_content():
    win32clipboard.OpenClipboard()
    try:
        # Check for file list
        if win32clipboard.IsClipboardFormatAvailable(win32con.CF_HDROP):
            files = win32clipboard.GetClipboardData(win32con.CF_HDROP)
            return 'files', list(files)
        # Check for text
        elif win32clipboard.IsClipboardFormatAvailable(win32con.CF_UNICODETEXT):
            text = win32clipboard.GetClipboardData(win32con.CF_UNICODETEXT)
            return 'text', text
        else:
            return 'unknown', None
    finally:
        win32clipboard.CloseClipboard()

def setup_file_watchers(paste_tracker):
    """Setup file system watchers for all available drives."""
    observers = []
    
    # Get all available drives
    drives = ['%s:' % d for d in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' if os.path.exists('%s:' % d)]
    
    for drive in drives:
        try:
            observer = Observer()
            observer.schedule(paste_tracker, drive + '\\', recursive=True)
            observer.start()
            observers.append(observer)
            print(f"Watching drive {drive} for paste operations...")
        except Exception as e:
            print(f"Could not watch drive {drive}: {e}")
    
    return observers

def main():
    last_clipboard = None
    paste_tracker = PasteTracker()
    
    print("Setting up file system watchers...")
    observers = setup_file_watchers(paste_tracker)
    
    print("Clipboard logger started. Press Ctrl+C to stop.")
    try:
        while True:
            ctype, content = get_clipboard_content()
            if content != last_clipboard:
                timestamp = time.strftime('%Y-%m-%d %H:%M:%S')
                if ctype == 'text':
                    log_entry = f"[{timestamp}] TEXT: {content}"
                    print(log_entry)
                    with open("clipboard_log.txt", "a", encoding="utf-8") as f:
                        f.write(log_entry + "\n")
                elif ctype == 'files':
                    for file_path in content:
                        ext = os.path.splitext(file_path)[1]
                        drive = os.path.splitdrive(file_path)[0]
                        if os.path.isdir(file_path):
                            ftype = "FOLDER"
                            category = "folder"
                        else:
                            ftype = "FILE"
                            category = get_file_category(ext)
                            # Track this file for paste detection
                            paste_tracker.add_copied_file(file_path)
                        
                        log_entry = f"[{timestamp}] COPY {ftype}: {file_path} (ext: {ext}) (category: {category}) (from: {drive})"
                        print(log_entry)
                        with open("clipboard_log.txt", "a", encoding="utf-8") as f:
                            f.write(log_entry + "\n")
                last_clipboard = content
            time.sleep(1)
    except KeyboardInterrupt:
        print("\nStopping file system watchers...")
        for observer in observers:
            observer.stop()
        for observer in observers:
            observer.join()
        print("Clipboard logger stopped.")

if __name__ == "__main__":
    main()
[2025-07-14 17:48:45] TEXT: import time
import os
import win32clipboard
import win32con
import threading
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler

class PasteTracker(FileSystemEventHandler):
    def __init__(self):
        self.recent_copies = {}
        self.paste_timeout = 30  # seconds to wait for paste after copy
        
    def add_copied_file(self, file_path):
        """Track a file that was just copied."""
        filename = os.path.basename(file_path)
        self.recent_copies[filename] = {
            'original_path': file_path,
            'timestamp': time.time()
        }
        
    def on_created(self, event):
        """Handle file creation events (potential paste operations)."""
        if not event.is_directory:
            filename = os.path.basename(event.src_path)
            current_time = time.time()
            
            # Check if this file was recently copied
            if filename in self.recent_copies:
                copy_info = self.recent_copies[filename]
                time_diff = current_time - copy_info['timestamp']
                
                # If file was created within timeout period after copy
                if time_diff <= self.paste_timeout:
                    original_path = copy_info['original_path']
                    paste_path = event.src_path
                    paste_drive = os.path.splitdrive(paste_path)[0]
                    
                    timestamp = time.strftime('%Y-%m-%d %H:%M:%S')
                    log_entry = f"[{timestamp}] PASTE: {original_path} -> {paste_path} (to: {paste_drive})"
                    print(log_entry)
                    
                    with open("clipboard_log.txt", "a", encoding="utf-8") as f:
                        f.write(log_entry + "\n")
                    
                    # Remove from tracking after successful paste
                    del self.recent_copies[filename]
            
            # Clean up old entries
            self.cleanup_old_entries(current_time)
    
    def cleanup_old_entries(self, current_time):
        """Remove entries older than timeout period."""
        expired_files = []
        for filename, info in self.recent_copies.items():
            if current_time - info['timestamp'] > self.paste_timeout:
                expired_files.append(filename)
        
        for filename in expired_files:
            del self.recent_copies[filename]

def get_file_category(extension):
    """Categorize files based on their extension."""
    # Convert to lowercase for case-insensitive matching
    ext = extension.lower()
    
    # Define categories
    categories = {
        'document': ['.txt', '.doc', '.docx', '.pdf', '.rtf', '.odt', '.pages'],
        'spreadsheet': ['.xls', '.xlsx', '.csv', '.ods', '.numbers'],
        'presentation': ['.ppt', '.pptx', '.key', '.odp'],
        'image': ['.jpg', '.jpeg', '.png', '.gif', '.bmp', '.tiff', '.svg', '.webp', '.ico'],
        'video': ['.mp4', '.avi', '.mov', '.wmv', '.flv', '.mkv', '.webm', '.m4v'],
        'audio': ['.mp3', '.wav', '.flac', '.aac', '.ogg', '.wma', '.m4a'],
        'archive': ['.zip', '.rar', '.7z', '.tar', '.gz', '.bz2', '.xz'],
        'code': ['.py', '.js', '.html', '.css', '.java', '.cpp', '.c', '.cs', '.php', '.rb', '.go', '.rs', '.swift'],
        'executable': ['.exe', '.msi', '.app', '.deb', '.rpm', '.dmg'],
        'data': ['.json', '.xml', '.yaml', '.yml', '.sql', '.db', '.sqlite'],
        'font': ['.ttf', '.otf', '.woff', '.woff2', '.eot'],
        'config': ['.ini', '.cfg', '.conf', '.config', '.properties', '.env']
    }
    
    # Find the category for the extension
    for category, extensions in categories.items():
        if ext in extensions:
            return category
    
    # Return 'other' if no category matches
    return 'other'

def get_clipboard_content():
    win32clipboard.OpenClipboard()
    try:
        # Check for file list
        if win32clipboard.IsClipboardFormatAvailable(win32con.CF_HDROP):
            files = win32clipboard.GetClipboardData(win32con.CF_HDROP)
            return 'files', list(files)
        # Check for text
        elif win32clipboard.IsClipboardFormatAvailable(win32con.CF_UNICODETEXT):
            text = win32clipboard.GetClipboardData(win32con.CF_UNICODETEXT)
            return 'text', text
        else:
            return 'unknown', None
    finally:
        win32clipboard.CloseClipboard()

def setup_file_watchers(paste_tracker):
    """Setup file system watchers for all available drives."""
    observers = []
    
    # Get all available drives
    drives = ['%s:' % d for d in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' if os.path.exists('%s:' % d)]
    
    for drive in drives:
        try:
            observer = Observer()
            observer.schedule(paste_tracker, drive + '\\', recursive=True)
            observer.start()
            observers.append(observer)
            print(f"Watching drive {drive} for paste operations...")
        except Exception as e:
            print(f"Could not watch drive {drive}: {e}")
    
    return observers

def main():
    last_clipboard = None
    paste_tracker = PasteTracker()
    
    print("Setting up file system watchers...")
    observers = setup_file_watchers(paste_tracker)
    
    print("Clipboard logger started. Press Ctrl+C to stop.")
    try:
        while True:
            ctype, content = get_clipboard_content()
            if content != last_clipboard:
                timestamp = time.strftime('%Y-%m-%d %H:%M:%S')
                if ctype == 'text':
                    log_entry = f"[{timestamp}] TEXT: {content}"
                    print(log_entry)
                    with open("clipboard_log.txt", "a", encoding="utf-8") as f:
                        f.write(log_entry + "\n")
                elif ctype == 'files':
                    for file_path in content:
                        ext = os.path.splitext(file_path)[1]
                        drive = os.path.splitdrive(file_path)[0]
                        if os.path.isdir(file_path):
                            ftype = "FOLDER"
                            category = "folder"
                        else:
                            ftype = "FILE"
                            category = get_file_category(ext)
                            # Track this file for paste detection
                            paste_tracker.add_copied_file(file_path)
                        
                        log_entry = f"[{timestamp}] COPY {ftype}: {file_path} (ext: {ext}) (category: {category}) (from: {drive})"
                        print(log_entry)
                        with open("clipboard_log.txt", "a", encoding="utf-8") as f:
                            f.write(log_entry + "\n")
                last_clipboard = content
            time.sleep(1)
    except KeyboardInterrupt:
        print("\nStopping file system watchers...")
        for observer in observers:
            observer.stop()
        for observer in observers:
            observer.join()
        print("Clipboard logger stopped.")

if __name__ == "__main__":
    main()
[2025-07-14 17:51:03] TEXT: 
[2025-07-14 17:51:16] FILE: C:\Users\marvin\Desktop\forms of ads.txt (ext: .txt) (category: document) (from: C:)
[2025-07-14 17:55:56] TEXT: pip install watchdog psutil
[2025-07-14 17:58:34] TEXT: pip install watchdog psutil
[2025-07-14 17:59:17] FILE: C:\Users\marvin\Desktop\police.docx (ext: .docx) (category: document) (from: C: - internal)
[2025-07-14 17:59:23] PASTED: D:\police.docx (ext: .docx) (category: document) (to: D: - internal)
[2025-07-14 18:01:22] FILE: C:\Users\marvin\Desktop\forms of ads.txt (ext: .txt) (category: document) (from: C: - internal)
